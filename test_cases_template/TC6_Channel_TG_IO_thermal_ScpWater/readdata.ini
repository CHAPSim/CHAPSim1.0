#------------------------------------------------------------------------------#
# Description of the given parameters.
# The default flow direction:
#           X = 1 = the streamwise direction, flow direction.
#           Y = 2 = the wall-normal / radial direction.
#           Z = 3 = the spanwise direction.
#------------------------------------------------------------------------------#
# In [flowtype], please provide the basic flow information.
#
# iCase [int]:
#            1 = Plane Channel (Cartesian Coordinates). Default
#            2 = Circular Tube (Cylindrical Coordinates).
#            3 = Annular Tube (Cylindrical Coordinates).
#            4 = A Cube Box for Taylor Green vortex (Cartesian
#                  Coordinates).
# iDomain [int]:
#            1 = Turbulence Generator Domain Only with Periodic
#                  Streamwise B.C.
#            2 = Main Flow Domain Only with Periodic Streamwise
#                  B.C. Default
#            3 = Both the Turbulence Generator Domain and the
#                  Main Flow Domain
# iThermoDynamics [int]:
#            0 = No Energy Equation, No Thermodynamics, Default
#            1 = Flow with Thermodynamics.
# iCHT [int]:
#            0 = No Conjugate Heat Transfer. Default
#            1 = Thermal Flow with Conjugate Heat Transfer.
#
[flowtype]
iCase= 1
iDomain= 3
iThermoDynamics= 1
iCHT= 0
#------------------------------------------------------------------------------#
# In [geometry], please provide the computational domain information.
#           All lengths are scaled by the half channel height or the radius of
#           the pipe interior diameter.
#           - The default channel in the wall-normal direction is y in [-1, 1]
#           - The default pipe in the wall-normal direction is r in [0, 1]
#           - The default Taylor Green Vortex Box is 2pi * 2pi * 2pi
#
# HX_tg [double]:
#           - scaled computational length of the streamwise direction for the
#             turbulence generator.
#           - If no turbulence generator is used, it is recommanded 0.0.
# HX_io [double]
#           - scaled computational length of the streamwise direction for the
#             main flow.
#           - If no main flow is calculated, it is recommanded 0.0.
# HZ [double]
#           - scaled computational length of the spanwise direction for the
#             channel flow.
#           - for pipe flow, it is 2pi by default.
#           - Change it to any value < 2pi to get a fan-shaped Domain with
#             periodic spanwise direction.
# HRb [double]
#           - valid only for the annular flow.
#           - the length from the centre of channel /pipe to the bottom of y.
#             eg. - 1.0 for Channel flow, 0 for pipe flow, +0.1 for Annular flow.
# HRt [double]
#           - valid only for the annular flow.
#           - the length from the centre of channel /pipe to the top y boundary.
#             eg. 1.0 for channel flow, 1 for pipe flow, 1.0 for nnnular flow.
#
[geometry]
HX_tg= 6.0
HX_io= 6.0
HZ= 3.0
HRb= -1.0
HRt= 1.0
#------------------------------------------------------------------------------#
# In [mesh], please provide the grid/cell numbers in each direction.
#            X = uniform distribution
#            Z = uniform distribution
#            Y = clustered/streching distribution
#
# NCL1_tg [int]:
#             - The cell number in the X direction for the turbulence generator
#             - If no turbulence generator is used, it is recommanded 0.
# NCL1_io [int]:
#            - The cell number in the X direction for the main flow.
#            - If no main flow is calculated, it is recommanded 0.
# NCL3 [int]:
#            - The cell number in the Z direction.
# NCL2 [int]:
#            - The cell number in the wall-normal direction.
#            - Cartesian: in the full channel height
#            - Cylindrical: in the radial length
# STR2 [double]:
#            A simple one -parameter hyperbolic tangent stretching function is
#            used as the mesh stretching method.
#            Ref: https://www.cfd-online.com /wiki/structured_mesh_generation
#            - Channel: The stretching function for a J in (0, 1) to generate
#                y in (-0.5, 0.5): y = tanh(STR2 * (J - 0.5)) / tanh(STR2 * 0.5)
#            - Pipe: The stretching function for a J in (0, 1) to generate
#                y in (0, 1.0): y = tanh(STR2 * J) / tanh(STR2).
#            - Annual: The stretching function for a J in (0.a, 0.b) to generate
#                y in (0, 1.0)
#            - TGVortex: not used. Always uniform distribution in all directions.
#            The stretching factor (STR2) rules:
#            - rule 1: STR2 <= 1.0 gives a quasi-linear (uniform) distribution.
#            - rule 2: a higher STR2 gives a more clustered grids near the ends.
#            - rule 3: STR2 is usually less than 5 (eg. 3.75) for Channel to
#                      avoid too fine grids near the ends.
#            - rule 4: STR2 is usually less than 3 (eg. 2.0) for the pipe to
#                      avoid too fine grids near the ends.
#
[mesh]
NCL1_tg= 64
NCL1_io= 64
NCL3= 64
NCL2= 64
STR2= 3.75
#------------------------------------------------------------------------------#
# In [boundary], please provide boundary conditions.
# the boundary condition options:
#           1 = the Dirichlet B.C./ the 1st type B.C./ the fixed B.C.
#           2 = the Neumann B.C./ the 2nd type B.C. / the derivative B.C.
#           3 = periodic B.C.
#
# BCX12_tg[int, int]:
#           the two B.C. in the streamwise X direction for the turbulence
#           generator.
#           - eg. for any flow type, it should be 3, 3.
# BCX12_io[int, int]:
#           the two B.C. in the streamwise X direction for the main flow.
#           - eg. for the main flow only, it should be 3, 3.
#           - eg. for the turbulence generator + main flow, it usually takes
#                 2, 4(1?).
# BCZ12[int, int]:
#           the two B.C. in the spanwise Z direction.
#           eg. for any flow, it should be 3, 3.
# BCY12[int, int]:
#           the two B.C. in the wall-normal (radius) direction.
#           eg. for Channel, it should be 1, 1.
#           eg. for pipe, it should be 1, 1.
#           eg, for TG vortex, it should be 3, 3.
#
[boundary]
BCX12_tg= 3, 3
BCX12_io= 2, 1
BCZ12= 3, 3
BCY12= 1, 1
#------------------------------------------------------------------------------#
# In [fluid], please provide the flow conditions.
#
# REN [double]:
#            The Reynolds number (Re_B) based on the bulk velocity and half
#            Channel height (pipe radius)
# ReIni [double]
#            The initial Reynolds number to sustain the flow perturbation
#            at the specified time limit.
# TLgRe [double]
#            The time length to which the Reynolds number is set to ReIni
# iFlowDriven [int]
#            The flow driven type for a periodic streamwise flow.
#            1 = constant mass flux driven flow, no further input required.
#            2 = pressure gradient driven flow, a skin Friction coefficient
#               (Cf) IS required to provide.
# Cf_Given [double]
#            a specified Cf to determine the pressure gradient driven force.
#            this value is also used to estimate the mesh resolution/monitored
#            values at the 'plus' scale.
#
[fluid]
REN= 2800.0
ReIni= 2800.0
TLgRe= 20.0
iFlowDriven= 1
Cf_Given= 8.18E-3
#------------------------------------------------------------------------------#
# In [thermohydraulics], please provide thermo-related parameteres
#           If iThermoDynamics = 0, all parameters in this Section are ignored.
#
# iFluidMedia [int]
#           1 = 'ScpWater'
#           2 = 'ScpCO2'
#           3 = 'LiquidSodium'
#           4 = 'LiquidLead'
#           5 = 'LiquidBismuth'
#           6 = 'LiquidLBE'
#           - IF iFluidMedia = 1, please copy 'NIST_WATER_23.5MP.DAT' from the
#             folder 'ref_thermoproperties' to your working directory.
#           - IF iFluidMedia = 2, please copy 'NIST__CO2_8MP.DAT' from the folder
#             'ref_thermoproperties' to your working directory.
#           - You could generate your own database of ref_thermoproperties base
#             on the format of examples in the folder 'ref_thermoproperties' if a
#             table-searching method is used to fetch ref_thermoproperties.
# iGravity [int]
#           the direction of the gravity force
#           0 = no gravity
#           1 = + X gravity = the same as the flow direction
#                        = vertical downwards flow
#          - 1 = -x gravity = opposite to the flow direction
#                        = vertical upwards flow
#           2 = + Y gravity = not valid.
#          -2 = - Y gravity = horizontal flow with gravity towards the - Y
#               direction (channel) or theta = pi - 2pi for pipe .
#           3 = + Z gravity = not valid.
#          - 3 = -z gravity = not valid.
# L0 [double]
#           (m): Reference length for the buoyancy. L0 = half channel height
#                or radium in the unit of metre.
# T0 [double]
#           (K): Reference temperature. Use T0 > Tscp to get a monotonic
#                relation between DH and h.
# Ti [double]
#           (K): the inlet and/or initial temperature for the main flow.
# iThermalWallType [int, int]
#           - For Channel flow, the two wall B.C. in the Streamwise Y direction
#             for thermal conditions.
#           - For pipe flow, only the first value matters.
#           1 = constant wall heat flux = Qw
#           2 = constant wall temperature = Tw
#           3 = power density (for CHT only) = Sw
#           For heat flux,
#               bottom wall heating (heat flux in ), qw = - KDT/ Dy = positive
#               bottom wall cooling (heat flux out), qw = - KDT/ Dy = negtive
#               top    wall heating (heat flux in ), qw = - KDT/ Dy = negtive
#               top    wall cooling (heat flux out), qw = - KDT/ Dy = positive
# thermalWallBC_Dim [double, double]
#           the specified thermal conditions on the walls
#           - If iThermalWallType = 1, it is qw = wall heat flux = qw = (W/M^2)
#                (+/- for heating/ Cooling).
#           - If iThermalWallType = 2, it is Tw = specified wall temperature (K).
#           - If iThermalWallType = 3, it is power density (W/M^3) for the solid CHT.
#
[thermohydraulics]
iFluidMedia= 1
iGravity= 1
L0= 1.5E-3
T0= 680.15
Ti= 645.15
iThermalWallType= 2, 2
thermalWallBC_Dim= 640.15, 660.15
#------------------------------------------------------------------------------#
# In [conjugateHeatTransfer], please provide CHT-Related parameters.
#           IF iCHT = 0, all  parameters in this section are ignored.
#           first value: the top wall (the side of Y = 1)
#           second value: the bottom wall (the side of Y = -1 for Channel
#                         or R = 0 for pipe.
# HY_Solid [double]
#           scaled length of the solid part in CHT.
# HXs_Solid [double]
#           the starting streamwise location for the heating in CHT.
# NCL2_Solid [int]
#           the cell number in the solid part each side.
# Cp_Solid [double]
#           (J / K / Kg): specified heat capacity of the solid.
#           eg. Cp (Zirconium) = 278.0
#           eg. Cp (Stainless steel 304) = 502.4
# D_Soild [double]
#           (kg/ M3): Density of the solid.
#           eg. Cp(Zirconium) = 6511.0
#           eg. Cp(Stainless steel 304) = 8000.0
# K_Solid [double]
#           (W/ M / K): thermal conductivity of the solid.
#           eg. K(Zirconium) = 22.6
#           eg. K(Stainless steel 304) = 16.2
#
[conjugateHeatTransfer]
HY_Solid= 0.1, 0.1
HXs_Solid= 1.0, 1.0
HXe_Solid= 3.0, 3.0
NCL2_Solid= 8, 8
Cp_Solid= 502.4, 502.4
D_Soild= 8000.0, 8000.0
K_Solid= 16.2, 16.2
#------------------------------------------------------------------------------#
# In [initialisation], please provide how to initialize the fields.
#
# initialisation types/flags:
# iIniField = 0 = initialized from a random flow field.
#           = 1 = the fields are interpolated from another case with the
#                   same computational domain but different mesh resolution.
#           = 2 = restart from the last saved time step.
# iIniField_tg [int]:
#            restart flag for the turbulence generator.
# iIniField_io[int]:
#            restart flag for the main flow.
# iRandomType [int]:
#            only for iIniField  = 0
#            1 = a real random field
#            2 = a specified random field
#            3 = a sinusoidal field, default for Taylor- Green Vortex field
# VPER [double]
#            for the whole domain
#            a scale factor of the magnitude of perturbation based on Up
#            (parabolic max. velo.)
#            eg. 0.6
# SVPER [double]
#            for the 1 /4 half Channel /pipe radius region near-wall region.
#            a reduced scale factor of the magnitude of perturbation based
#            on Up (parabolic max. velo.)
#            eg. 0.3
# TimeReStart_tg [double]:
#            only for iIniField  = 1 or 2.
#            the reStart time step for the turbulence generator.
# TimeReStart_io [double]:
#            only for iIniField  = 1 or 2.
#            the reStart time step for the main flow.
# iIniFieldType [int]:
#           only for iIniField  = 1 or 2.
#           which fields to be reStarted from the last time step. For
#           the main flow only.
#           0 = normal reStart from the last time step.
#           1 = only Start flow fields, no thermal fields are reStarted.
# iIniFieldTime [int]:
#           only for iIniField  = 1 or 2.
#           how to set up the current/first physical time when reStart.
#           0 = normal reStart, follow the last time step.
#           1 = reset the current physical time to 0.
#
[initialisation]
iIniField_tg= 0
iIniField_io= 0
iRandomType= 2
VPER= 0.6
SVPER= 0.3
TimeReStart_tg= 0.0
TimeReStart_io= 0.0
iIniFieldType= 0
iIniFieldTime= 0
#------------------------------------------------------------------------------#
# In [numerics], please provide some numerical Parameters for the solver
# About the solver stop criteria:
#           The iteration number reaches min (NTSTF, TSTOP / DT0).
# About the real time step critia:
#           dt = max(min(DT0, 5* Dt, CFL / (dU / DX)), dtmin )
#
# NTSTF [int]:
#           the total number of iterations to run.
# TSTOP [double]:
#           the total physical time (dimensionless) to run.
# timeFlowStart [double]:
#           the physical time to run the flow solver if iThermoDynamics = 1.
# timeThermoStart [double]:
#           the physical time to turn on the energy equation
#           if iThermoDynamics = 1.
# DT [double]:
#           the specified stepping/marching time step (dimensionless).
# DtMin [double]
#           the specified minimum stepping/ marching time step (dimensionless).
# CFLGV [double]
#           the CFL number to determine the real time step.
#
[numerics]
NTSTF= 10000
TSTOP= 100.0
timeFlowStart= 0.0
timeThermoStart= 2.0
DT= 1.0E-3
DtMin= 1.0E-6
CFLGV= 1.0
#------------------------------------------------------------------------------#
# In [methods], please provide the flags for optional numerical methods.
#
# iVisScheme [int]:
#           a flag for the time scheme for the viscous terms.
#           0 = Explicit Runge-Kutta method.
#           1 = a semi-implicit Runge-Kutta and Crank -Nicolson method.
# iWeightedPre [int]:
#           a flag for the pressure treatment.
#           0 = no special treatment
#           1 = a weighted pressure used as that in Pierce2020.
#
[methods]
iVisScheme= 0
iWeightedPre= 0
#------------------------------------------------------------------------------#
# In [statistics], please provide the information for results recording and
#                  processing.
#
# dtSave1 [double]
#          The time interval to save the instantaneous and the statistics.
# tRunAve1 [double]
#          The time (dimensionless) to implement the running time-averaging data.
# tRunAve_Reset [double]
#          - After monitoring some transient data and finding the tRunAve if too
#            early, then tRunAve_Reset is used to reset the time from when to
#            carry out the time averaging.
#          - Note: Only tRunAve_Reset > tRunAve is meaningful.
# dtAveView [double]
#          Time interval to write the time averaged data for visualization.
#          dtAveView = N * dtSave1. N is an integer.
# dtRawView [double]
#          Time interval to write the raw data for visualization.
#          Give it a huge number to get rid of it.
# zoneNameView [string]
#          The zone name for data visualization..
# iterMonitor [int]
#          The iteration interval to print some values to monitor the solved
#          flow fields.
# MGRID [int]
#          The number of y locations for recording x-z plane statistics
# JINI [int]
#          The first recorded y direction cell index.
#
[statistics]
dtSave1= 5.0
tRunAve= 10.0
tRunAve_Reset= 200.0
dtAveView= 20.0
dtRawView= 20.0
iterMonitor= 1
MGRID= 4
JINI= 2
#------------------------------------------------------------------------------#
# iPostProcess [int]
#          the flag for post-processing type
#          0 = normal restart without further post-processing.
#          1 = post-processing data only without the solver marching. Time
#              intervals are based on the given time intervals.
#          2 = post-processing data from the given instantaneous flow fields.
# iPPInst [int]
#          The flag to generate instantaneous raw data for the whole
#          field. It works only when iPostProcess = 1.
#          0 = not produce instantaneous raw data for visualization
#          1 = to produce instantaneous raw data for visualization
# iPPSpectra [int]
#          The flag to produce the spectral information (variable correlation)
#          in both space and time fields.
#          0 = no
#          1 = yes.
# iPPQuadrants [int]
#          The flag to produce the quadrant analysis.
#          0 = no
#          1 = yes.
# iPPDimension [int]
#          The flag to produce data type.
#          0 = Only output dimensionless data.
#          1 = output both dimensional and dimensionless data.
#
# pp_instn_sz [int]
#          How many instantaneous flow field is given for post-processing.
#          - It works only iPostProcess = 2.
#          - The default iPPInstnsz = 0.
#          - If iPPInstnsz > 0, then the file names for the post-processing
#            should be provided below. Thus, it should look like,
#             iPPInstnsZ = 0
#          or
#             iPPInstnsZ = 2
#             flow1.D
#             flow2.D
#
[postprocess]
iPostProcess= 0
iPPInst= 0
iPPSpectra= 0
iPPQuadrants= 0
iPPDimension= 0
pp_instn_sz= 0
#-------------------------------------------------------------------------------#
